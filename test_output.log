============================= test session starts ==============================
platform darwin -- Python 3.12.9, pytest-8.3.5, pluggy-1.6.0 -- /Users/dontraub/Library/Caches/pypoetry/virtualenvs/dme-sync-SB1h0D0P-py3.12/bin/python
cachedir: .pytest_cache
rootdir: /Users/dontraub/Code_Projects/dme-sync-new
configfile: pyproject.toml
plugins: anyio-4.9.0
collecting ... collected 29 items

src/tests/test_chunk_embed_index.py::test_chunk_text_section PASSED      [  3%]
src/tests/test_chunk_embed_index.py::test_chunk_text_paragraph_overlap PASSED [  6%]
src/tests/test_chunk_embed_index.py::test_get_embedding_returns_vector PASSED [ 10%]
src/tests/test_chunk_embed_index.py::test_get_embedding_handles_error PASSED [ 13%]
src/tests/test_chunk_embed_index.py::test_process_and_upsert_runs PASSED [ 17%]
src/tests/test_chunk_embed_index.py::test_chunk_metadata_enrichment PASSED [ 20%]
src/tests/test_dynamic_enrichment.py::test_extract_entities_and_relationships PASSED [ 24%]
src/tests/test_normalize_and_canonicalize.py::test_sha256_of_url PASSED  [ 27%]
src/tests/test_normalize_and_canonicalize.py::test_clean_text PASSED     [ 31%]
src/tests/test_normalize_and_canonicalize.py::test_detect_entity_type_url PASSED [ 34%]
src/tests/test_normalize_and_canonicalize.py::test_detect_entity_type_html PASSED [ 37%]
src/tests/test_normalize_and_canonicalize.py::test_validate_schema_valid PASSED [ 41%]
src/tests/test_normalize_and_canonicalize.py::test_validate_schema_invalid PASSED [ 44%]
src/tests/test_normalize_and_canonicalize.py::test_quarantine_failure PASSED [ 48%]
src/tests/test_normalize_and_canonicalize.py::test_persist_to_postgres PASSED [ 51%]
src/tests/test_normalize_and_canonicalize.py::test_process_raw_page_valid PASSED [ 55%]
src/tests/test_normalize_and_canonicalize.py::test_process_raw_page_invalid PASSED [ 58%]
src/tests/test_pinecone_needle.py::test_needle_queries FAILED            [ 62%]
src/tests/test_psycopg2_import.py::test_psycopg2_import PASSED           [ 65%]
src/tests/test_relationship_graph.py::test_upsert_node PASSED            [ 68%]
src/tests/test_relationship_graph.py::test_upsert_relationship PASSED    [ 72%]
src/tests/test_relationship_graph.py::test_process_graph_batch_creates_nodes_and_edges PASSED [ 75%]
src/tests/test_relationship_graph.py::test_process_graph_batch_handles_missing_program_ids PASSED [ 79%]
src/tests/test_relationship_graph.py::test_get_normalized_records PASSED [ 82%]
src/tests/test_relationship_graph.py::test_materialize_adjacency_to_postgres PASSED [ 86%]
src/tests/test_relationship_graph.py::test_process_graph_with_retries_handles_transient_errors PASSED [ 89%]
src/tests/test_relationship_graph.py::test_process_graph_with_retries_skips_after_max_retries PASSED [ 93%]
src/tests/test_relationship_graph.py::test_process_graph_batch_enrichment FAILED [ 96%]
src/tests/test_schema_inference.py::test_infer_schema_from_samples PASSED [100%]

=================================== FAILURES ===================================
_____________________________ test_needle_queries ______________________________

    def test_needle_queries():
        for v in TEST_VECTORS:
            start = time.time()
            query_vec = v["values"]
            result = index.query(vector=query_vec, top_k=1, include_metadata=True)
            elapsed = time.time() - start
>           assert result["matches"], f"No match for {v['id']}"
E           AssertionError: No match for needle-1
E           assert []

src/tests/test_pinecone_needle.py:39: AssertionError
_____________________ test_process_graph_batch_enrichment ______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x147afd5b0>

    def test_process_graph_batch_enrichment(monkeypatch):
        # Mock Neo4j driver/session/tx
        class DummySession:
            def write_transaction(self, func, *args, **kwargs):
                func_calls.append((func.__name__, args, kwargs))
                return func(*args, **kwargs)
            def __enter__(self):
                return self
            def __exit__(self, exc_type, exc_val, exc_tb):
                pass
        class DummyDriver:
            def session(self):
                return DummySession()
        func_calls = []
        # Patch upsert_node and upsert_relationship
        import indexer.relationship_graph as rg
        def named_mock(name):
            m = MagicMock()
            m.__name__ = name
            return m
        monkeypatch.setattr(rg, "upsert_node", named_mock("upsert_node"))
        monkeypatch.setattr(rg, "upsert_relationship", named_mock("upsert_relationship"))
        # Doc with enrichment fields
        doc = {
            "doc_id": "abc123",
            "entity_type": "program",
            "text": "Coach John Smith teaches the Basketball Program starting June 1st.",
            "entities": ["John Smith", "Basketball Program"],
            "relationships": [
                {"subject": "John Smith", "predicate": "teaches", "object": "Basketball Program"}
            ],
            "raw": {}
        }
        rg.process_graph_batch([doc], DummyDriver(), 1)
        # Check that upsert_node and upsert_relationship were called for enrichment
        print("[DEBUG] upsert_node calls:", rg.upsert_node.call_args_list)
        print("[DEBUG] upsert_relationship calls:", rg.upsert_relationship.call_args_list)
>       rg.upsert_node.assert_any_call(ANY, "Entity", {"doc_id": "John Smith", "name": "John Smith"})

src/tests/test_relationship_graph.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock id='5655050864'>
args = (<ANY>, 'Entity', {'doc_id': 'John Smith', 'name': 'John Smith'})
kwargs = {}
expected = call(<ANY>, 'Entity', {'doc_id': 'John Smith', 'name': 'John Smith'})
cause = None
actual = [call('Program', {'doc_id': 'abc123', 'entity_type': 'program', 'text': 'Coach John Smith teaches the Basketball Progr...: 'John Smith', 'name': 'John Smith'}), call('Entity', {'doc_id': 'Basketball Program', 'name': 'Basketball Program'})]
expected_string = "mock(<ANY>, 'Entity', {'doc_id': 'John Smith', 'name': 'John Smith'})"

    def assert_any_call(self, /, *args, **kwargs):
        """assert the mock has been called with the specified arguments.
    
        The assert passes if the mock has *ever* been called, unlike
        `assert_called_with` and `assert_called_once_with` that only pass if
        the call is the most recent one."""
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        cause = expected if isinstance(expected, Exception) else None
        actual = [self._call_matcher(c) for c in self.call_args_list]
        if cause or expected not in _AnyComparer(actual):
            expected_string = self._format_mock_call_signature(args, kwargs)
>           raise AssertionError(
                '%s call not found' % expected_string
            ) from cause
E           AssertionError: mock(<ANY>, 'Entity', {'doc_id': 'John Smith', 'name': 'John Smith'}) call not found

/opt/homebrew/Cellar/python@3.12/3.12.9/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1020: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] upsert_node calls: [call('Program', {'doc_id': 'abc123', 'entity_type': 'program', 'text': 'Coach John Smith teaches the Basketball Program starting June 1st.', 'entities': ['John Smith', 'Basketball Program'], 'relationships': [{'subject': 'John Smith', 'predicate': 'teaches', 'object': 'Basketball Program'}], 'raw': {}}),
 call('Entity', {'doc_id': 'John Smith', 'name': 'John Smith'}),
 call('Entity', {'doc_id': 'Basketball Program', 'name': 'Basketball Program'})]
[DEBUG] upsert_relationship calls: [call('Entity', 'John Smith', 'teaches', 'Entity', 'Basketball Program')]
=========================== short test summary info ============================
FAILED src/tests/test_pinecone_needle.py::test_needle_queries - AssertionErro...
FAILED src/tests/test_relationship_graph.py::test_process_graph_batch_enrichment
================== 2 failed, 27 passed, 4 warnings in 29.47s ===================
